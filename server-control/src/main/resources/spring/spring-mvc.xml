<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <description>Spring MVC Configuration</description>

<!--    <mvc:annotation-driven>-->
<!--        <mvc:message-converters register-defaults="true">-->
<!--            <bean class="com.helijia.common.web.handler.JsonHttpMessageConverter">-->
<!--                <property name="features">-->
<!--                    <list>-->
<!--                        <ref bean="disableCircularReferenceDetect"/>-->
<!--                        &lt;!&ndash; 取消fast json解析循环引用的处理，程序上避免循环引用 &ndash;&gt;-->
<!--                    </list>-->
<!--                </property>-->
<!--                <property name="filters">-->
<!--                    <list>-->
<!--                        <ref bean="bigDecimalFilter"/>-->
<!--                        &lt;!&ndash; 取消fast json解析循环引用的处理，程序上避免循环引用 &ndash;&gt;-->
<!--                    </list>-->
<!--                </property>-->
<!--            </bean>-->
<!--        </mvc:message-converters>-->
<!--    </mvc:annotation-driven>-->



    <!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.helijia.customer.handler.ExtTokenAuthInterceptor" />
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.helijia.framework.risk.filter.RiskCollectInterceptor" >
                <property name="riskServiceClient" ref="riskServiceClient"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!-- 拦截器配置顺序强相关（先认证，后审计）-->
<!--    <mvc:interceptors>-->
<!--        &lt;!&ndash; 配置认证拦截器 &ndash;&gt;-->
<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/**" />-->
<!--            &lt;!&ndash; 主动排除一些无需会话认证的 URL &ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/janus/*"/>-->
<!--            <mvc:exclude-mapping path="/order/hema/*"/>-->
<!--            <mvc:exclude-mapping path="/stock/hema/*"/>-->
<!--            <mvc:exclude-mapping path="/performance/hema/*"/>-->
<!--            <mvc:exclude-mapping path="/mobileTao/*"/>-->
<!--            <mvc:exclude-mapping path="/miniapp/user/*"/>-->
<!--            <mvc:exclude-mapping path="/tmall/*"/>-->
<!--            <bean class="com.helijia.janus.common.util.JanusAuthInterceptor">-->
<!--                <property name="redirectURL" value="http://admin-sso.stg.helijia.com/janusweb/login/index.html?doneUrl=http://poseidon.helijia.com" />-->
<!--            </bean>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->

    <mvc:annotation-driven/>
    <context:component-scan base-package="com.nlxr.server.control"
                            use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置限流 AOP 切面逻辑 -->
    <bean id="requestLimiterAdvice" class="com.nlxr.server.control.limit.aop.RequestLimiterAdvice" />
    <aop:config>
        <aop:pointcut id="limitPointcut" expression="@annotation(com.nlxr.server.control.limit.annotation.RequestLimiter)" />
        <aop:advisor advice-ref="requestLimiterAdvice" pointcut-ref="limitPointcut" order="1" />
    </aop:config>



    <bean id="exceptionHandler" class="com.nlxr.server.control.limit.ExceptionHandler">
        <property name="order" value="1"/>
        <property name="apiCode" value="00001"/>
        <property name="apiMessage" value="系统未知错误"/>
        <property name="argsInvalidCode" value="00002"/>
        <property name="argsInvalidMessage" value="参数无效[%s]"/>
    </bean>

    <!-- aop 统计接口耗时 -->
<!--    <bean id="executeTime" class="com.helijia.customer.handler.ExecuteTimeAOP"/>-->
<!--    <aop:config>-->
<!--        <aop:aspect id="executeTimeAOP" ref="executeTime">-->
<!--            <aop:pointcut expression="execution(public * com.helijia.customer.modules..*.*Controller.*(..))"-->
<!--                          id="listenerCut"/>-->
<!--            <aop:around method="around" pointcut-ref="listenerCut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->


</beans>
